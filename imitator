using System;
using System.Collections.Generic;
using System.Linq;
using Elgsis.DP.Protocols.Dlms.Cosem;
using Elgsis.DP.Protocols.Dlms.Cosem.IC;
using Elgsis.DP.Protocols.Asn;
using Elgsis.DP;
using Elgsis.Virtual.Device.Dlms;

namespace VirtualDevs.Device.Dlms
{
    struct GeneratorColumn
    {
        public readonly CaptureObjectDefinition Cod;
        public readonly Func<double, object> func;

        public GeneratorColumn(CaptureObjectDefinition cod, Func<double, object> func)
        {
            this.Cod = cod;
            this.func = func;
        }
    }

    class ProfileClassImitator : IAttributesHandler
    {
        private readonly Func<DateTime> timeSource;
        private readonly ITableGenerator tableGenerator;
        private readonly TimeSpan capturePeriod;
        private readonly UInt32 profileEntries;
        private readonly DateTime firstEntryTime;

        //private readonly long capturePeriodInTicks;
        //private readonly uint entriesInUse;
        //private readonly int numberOfCaptures;
        //private readonly DateTimeOffset lastCaptureTime;

        public ProfileClassImitator(
            Func<DateTime> timeSource,
            ITableGenerator tableGenerator,
            TimeSpan capturePeriod,
            UInt32 profileEntries,
            DateTime firstEntryTime
            )
        {
            this.tableGenerator = tableGenerator ?? throw new ArgumentNullException(nameof(tableGenerator)); //ITableGenerator
            this.timeSource = timeSource ?? throw new ArgumentNullException(nameof(timeSource));
            this.profileEntries = profileEntries;
            this.capturePeriod = capturePeriod;
            this.firstEntryTime = firstEntryTime;

            //this.capturePeriodInTicks = TimeSpan.FromSeconds(capturePeriod).Ticks;
            //this.numberOfCaptures = CalcNumOfCaptures(capturePeriodInTicks, timeSource);
            //this.lastCaptureTime = CalcLastCaptureTime(numberOfCaptures, capturePeriodInTicks, timeSource);
            //this.entriesInUse = CalcEntriesInUse(timeSource(), lastCaptureTime, capturePeriod);
        }
        public Func<DateTime> TimeSource { get { return timeSource; } }

        public ITableGenerator TableGenerator { get { return tableGenerator; } }

        public UInt32 CapturePeriod
        {
            get
            {
                return capturePeriod.Seconds > 0 ? (uint)capturePeriod.Seconds : 0; 
            }
        } 

        public UInt32 ProfileEntries { get { return profileEntries; } }

        public int ClassId => throw new NotImplementedException();

        public Func<SelectiveAccess?, Data>[] AttributesHandlers
        {
            get
            {
                return new Func<SelectiveAccess?, Data>[]
                {
                         x => throw new NotImplementedException(),
                         GetData,
                         GetCaptureObjects,
                         GetCapturePeriod,
                         null,
                         null,
                         GetEntryInUse,
                         GetprofileEntries
                };
            }
        }

        public Data GetCaptureObjects(SelectiveAccess? selective)
        {
            //Time? Yes
            var listCapObjDef = new List<CaptureObjectDefinition>();
            //listCapObjDef.Add(new CaptureObjectDefinition(8, ObisCode.Parse("0100010000FF"), 2, 0));

            foreach( var col in tableGenerator.GeneratorColumns)
            {
                listCapObjDef.Add(col.Cod);
            }

            return DataCoder.Encode(listCapObjDef.ToArray());
        }

        public Data GetCapturePeriod(SelectiveAccess? selective)
        {
            return DataCoder.Encode(CapturePeriod);
        }

        public Data GetprofileEntries(SelectiveAccess? selective)
        {
            return DataCoder.Encode(profileEntries);
        }

        public Data GetEntryInUse(SelectiveAccess? selective)
        {
            //return  tableGenerator.GetDataRezults().EntrieInuse
            return DataCoder.Encode(tableGenerator.GetEntriesInUse(timeSource(), firstEntryTime, capturePeriod, ProfileEntries));
        }

        public Data GetData(SelectiveAccess? access)
        {
            ValidateSelectiveAccess(access);

            var entry = (EntryDescriptor)access.Value.Descriptor;

            if (entry.FromEntry == 0)
                return DataCoder.Encode(new Data[] { });
            //tableGenerator.GetDataRezults().GetData()
            return tableGenerator.GenerateTable(entry, timeSource(), firstEntryTime, capturePeriod, profileEntries);
        }

        private void ValidateSelectiveAccess(SelectiveAccess? access)
        {
            if (!access.HasValue)
                throw new NotImplementedException();

            if (access.Value.Index != 1)
                throw new NotImplementedException();
        }
    }
}
